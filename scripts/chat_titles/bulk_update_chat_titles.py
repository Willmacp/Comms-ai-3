"""
Written 2024-09-23

This script was written to perform a bulk update of chat titles over a given range.
It was necessary due to a bug on production where malformed chat titles were generated and saved to the database.

To use this script, you need to:
- Edit the 'base_url' to the base URL of your target API. You will need to have network access to the API; therefore
consider if your machine has access to the dev / test / production APIs if that is your target.
- Edit the list of 'chat_uuids' to your desired chat UUIDs. A SQL query is provided to help query the database
for these UUIDs.
- Run the script as a single python script (e.g `python3 scripts/bulk_update_chat_titles.py`)
"""

##########################################################################
### Setup

import logging
import os

import requests

# The base URL for the API. We use this to send requests to the API.
base_url = "http://localhost:5312"


# Define a list of chat UUIDs that you want to regenerate the title of.
# Use the following SQL query to extract all chat UUIDs from the database between a set of dates. The set of dates
# aligns with the chats we wish to update:
#   SELECT string_agg('"' || uuid || '"', ', ') AS uuid_list FROM "chat" WHERE created_at >= '2024-09-01'
#   AND created_at <= '2024-09-18'
chat_uuids = ["fe4d8bbd-355f-4fbb-94e8-4989b072fa85"]


# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


##########################################################################
### Function definitions


def create_session_auth(base_url: str, user_uuid: str, auth_token: str = os.getenv("AUTH_SECRET_KEY")):
    """
    Create an authenticated session for a user.

    This function sends a POST request to the /v1/auth-sessions endpoint to create an authenticated session
    using the provided base URL, authentication token, and user UUID. It returns the session authentication token.

    Args:
        base_url (str): The base URL of the API.
        auth_token (str): The authentication token, defaulting to the value of the AUTH_SECRET_KEY environment variable.
        user_uuid (str): The UUID of the user, defaulting to a newly generated UUID.

    Returns:
        str: The session authentication token.
    """
    try:
        user_key_uuid = user_uuid

        auth_sessions_url = f"{base_url}/v1/auth-sessions"
        auth_sessions_headers = {"User-Key-UUID": user_key_uuid, "Auth-Token": auth_token}
        logger.debug(f"Sending POST request to {auth_sessions_url} with headers {auth_sessions_headers}")
        auth_sessions_response = requests.post(auth_sessions_url, headers=auth_sessions_headers)
        auth_sessions_response.raise_for_status()
        session_auth = auth_sessions_response.json().get("Session-Auth")
        logger.debug(f"Received session_auth: {session_auth}")

        return session_auth
    except requests.RequestException as e:
        logger.error(f"Failed to create session auth: {e}")
        raise


def update_chat_title(
    chat_uuid: str,
    base_url: str,
    user_uuid: str,
    session_auth: str,
    auth_token: str = os.getenv("AUTH_SECRET_KEY"),
):
    """
    Update a chat title.

    Args:
        chat_uuid (str): The UUID of the chat to update.
        base_url (str): The URL to use when sending API queries.
        session_auth (str): A token generated by the API for this user.
        auth_token (str): The authentication token, defaulting to the value of the AUTH_SECRET_KEY environment variable.
        user_uuid (str): The UUID of the user, defaulting to a newly generated UUID.

    Returns:
        None
    """
    try:
        user_key_uuid = user_uuid

        logger.debug("--- Step 1: Get the chat and its messages ---")
        messages_url = f"{base_url}/v1/chats/users/{user_uuid}/chats/{chat_uuid}/messages"
        messages_headers = {"Session-Auth": session_auth, "User-Key-UUID": user_key_uuid, "Auth-Token": auth_token}
        logger.debug(f"Sending GET request to {messages_url} with headers {messages_headers}")
        messages_response = requests.get(messages_url, headers=messages_headers)
        messages_response.raise_for_status()
        messages_data = messages_response.json()
        logger.debug(f"Received messages data: {messages_data}")
        logger.debug(f"Current chat title (before update): {messages_data.get('title')}")

        logger.debug("--- Step 2: Get the contents of the first message ---")
        first_message = min(
            (msg for msg in messages_data["messages"] if msg["role"] == "user"),
            key=lambda x: x["created_at"],
        )
        query = first_message["content"]
        logger.debug(f"Using first message as query: {query}")

        logger.debug("--- Step 3: Update the chat title ---")
        chat_title_url = f"{base_url}/v1/chats/users/{user_uuid}/chats/{chat_uuid}/title"
        chat_title_headers = {"Session-Auth": session_auth, "User-Key-UUID": user_key_uuid, "Auth-Token": auth_token}
        chat_title_body = {"query": query, "use_case_id": ""}
        logger.debug(
            f"Sending PUT request to {chat_title_url} with headers {chat_title_headers} and body {chat_title_body}",
        )
        chat_title_response = requests.put(chat_title_url, headers=chat_title_headers, json=chat_title_body)
        chat_title_response.raise_for_status()
        logger.debug("Chat title updated successfully")

        return chat_uuid
    except requests.RequestException as e:
        logger.error(f"Failed to update chat title for {chat_uuid}: {e}")
        raise
    except ValueError as e:
        logger.error(f"Error processing messages for {chat_uuid}: {e}")
        raise


##########################################################################
### Trigger and run


if __name__ == "__main__":
    logger.info("\n\n### === *** STARTING UPDATE OF CHAT TITLES *** === ###")

    try:
        # User UUID, which is needed to create an authenticated session.
        # This can be any UUID4 as we do not validate user UUIDs on the API.
        # Here we use a value that is obviously not a normal user UUID. This is to differentiate it from normal
        # user interactions with the API.
        user_uuid = "ffffffff-ffff-ffff-ffff-ffffffffffff"

        logger.debug("Creating a valid Auth-Session...")
        session_auth = create_session_auth(base_url, user_uuid)

        successful_updates = 0

        for i, chat_uuid in enumerate(chat_uuids):
            logger.info(f"\n\n====== Updating title for chat {i + 1} of {len(chat_uuids)} ======")
            try:
                update_chat_title(chat_uuid, base_url, user_uuid, session_auth)
                successful_updates += 1
            except Exception as e:
                logger.error(f"Failed to update chat title for {chat_uuid}: {e}")

        logger.info("\n\n### === *** COMPLETED UPDATE OF CHAT TITLES *** === ###")
        logger.info(f"Successfully updated titles for {successful_updates} out of {len(chat_uuids)} chats.")
    except Exception as e:
        logger.error(f"An error occurred during the update process: {e}")
