"""migration message

Revision ID: 8ca7db7bfc4c
Revises: 10f8ae848296
Create Date: 2024-10-23 12:12:34.149156

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.sql import text as sa_text

# revision identifiers, used by Alembic.
revision: str = "8ca7db7bfc4c"
down_revision: Union[str, None] = "10f8ae848296"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def common_columns():
    """Return common columns used in multiple tables."""
    return [
        sa.Column("id", sa.Integer(), primary_key=True, autoincrement=True),
        sa.Column("uuid", UUID(as_uuid=True), server_default=sa_text("uuid_generate_v4()"), nullable=False),
        sa.Column("created_at", sa.DateTime(), server_default=sa_text("CURRENT_TIMESTAMP"), nullable=False),
        sa.Column(
            "updated_at",
            sa.DateTime(),
            server_default=sa_text("CURRENT_TIMESTAMP"),
            onupdate=sa_text("CURRENT_TIMESTAMP"),
        ),
        sa.Column("deleted_at", sa.DateTime(), nullable=True),
    ]


def upgrade() -> None:
    # Enable UUID extension in PostgreSQL
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp"')

    op.create_table(
        "document_user_mapping",
        *common_columns(),
        sa.Column("document_id", sa.Integer(), sa.ForeignKey("document.id"), nullable=False),
        sa.Column("user_id", sa.Integer(), sa.ForeignKey("user.id"), nullable=False),
        sa.Column("auth_session_id", sa.Integer(), sa.ForeignKey("auth_session.id"), nullable=False),
    )
    op.create_index("idx_document_user_mapping_document_id", "document_user_mapping", ["document_id"])
    op.create_index("idx_document_uuid", "document", ["uuid"])

    # seed personal document index
    seed_personal_doc_indexes = [
        {
            "name": "personal_document_uploads",
            "description": "This index contains all the personal documents uploaded by users. "
            "It is used to search for personal documents.",
        }
    ]

    search_indexes_table = sa.table("search_index", sa.column("name", sa.String), sa.column("description", sa.Text))
    op.bulk_insert(search_indexes_table, seed_personal_doc_indexes)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###

    op.execute("DROP TABLE document_user_mapping")
    op.execute("DROP INDEX idx_document_uuid")

    op.execute("DELETE FROM search_index WHERE name = 'personal_document_uploads'")
    # ### end Alembic commands ###
